  *PostgreSQL commands  *

  DATABASE 

1. Create Database : This will create a new database.
	Syntax: create database <database-name>;
	
    Example : postgres=# create database person;
              CREATE DATABASE

	a) \l -> To create a list of all databases created earlier.
	b) \c -> To connect a database.
		Syntax : \c <database-name>;

        Example : 
            postgres=# \c person;
            psql (15.3 (Ubuntu 15.3-1.pgdg18.04+1), server 10.23 (Ubuntu 10.23-0ubuntu0.18.04.2))
            You are now connected to database "person" as user "postgres".


2. Drop Database : To drop the database.
	Syntax : drop database <database-name>;

    Example : 
        postgres=# drop database person;
        DROP DATABASE


 TABLES 

3. Create Table : To create a new table in existing database.
	Syntax : create table <table-name>(<column1> <data-type> , <column2> <data type> , ..);
    
    Example :
        company=# create table employee (
        company(# emp_id int primary key,
        company(# emp_name varchar not null,
        company(# gender varchar );
        CREATE TABLE

	a) \d or \dt-> This command wil list all the tables in current database.

        Example :
            company=# \dt
                    List of relations
            Schema |   Name   | Type  |  Owner   
            --------+----------+-------+----------
            public | employee | table | postgres
            (1 row)

4. Drop table : To drop the table from database.
	Syntax: drop table <table-name>

    Example : 
        company=# drop table
5. Describe table : To find the information on columns of a table.
	Syntax : \d <table-name>

    Example :
        company=# \d employee
                    Table "public.employee"
        Column  |       Type        | Collation | Nullable | Default 
        ----------+-------------------+-----------+----------+---------
        emp_id   | integer           |           | not null | 
        emp_name | character varying |           | not null | 
        gender   | character varying |           |          | 
        Indexes:
            "employee_pkey" PRIMARY KEY, btree (emp_id)

6. alter table : This command is used to change the current table structure.
    Syntax : ALTER TABLE <table-name> action;  

    a) Add a column : To add a new column in existing table.
        Syntax: alter table <table-name> add column <column-name>;

        Example :
            company=# alter table employee add column address varchar(100);
            ALTER TABLE
    b) Rename a column : To rename the column name.
        Syntax : alter table <table-name> rename column <source_name> to <destination_name>;

        Example :
            company=# alter table employee rename column emp_name to name;
            ALTER TABLE
            company=# \d employee
                                Table "public.employee"
            Column  |          Type          | Collation | Nullable | Default 
            ---------+------------------------+-----------+----------+---------
            emp_id  | integer                |           | not null | 
            name    | character varying      |           | not null | 
            gender  | character varying      |           |          | 
            address | character varying(100) |           |          | 
            Indexes:
                "employee_pkey" PRIMARY KEY, btree (emp_id)
             c) Drop a column : To delete the column from a table.
        Syntax : alter table <table-name> drop column <column-name>;

        Example :
            company=# alter table employee drop column address;
            ALTER TABLE
    d) Change column type : To change the type of column.
        Syntax : alter table <table-name> alter column type <new-type>;

        Example :
            company=# alter table employee alter column gender type char(30);
            ALTER TABLE
    e) Add constraint on column : To add the new constraint on column.
        Syntax : alter table <table-name> alter column <column-name> set <constraint>;

        Example :
            company=# alter table employee alter column gender set not null;
            ALTER TABLE
    f) Drop constraint : To remove the constraint from column in a table.
        Syntax : alter table <table-name> alter column <column-name> drop <constraint>;
 
        Example :
            company=# alter table employee alter column gender drop not null;
            ALTER TABLE
    g) Add primary key constraint : To add primary key constraint in a column.
        Syntax : alter table <table-name> add primary key <column-name>;

        Example :
            company=# alter table person add primary key (id);
            ALTER TABLE
            company=# \d person
                                Table "public.person"
            Column |         Type          | Collation | Nullable | Default 
            --------+-----------------------+-----------+----------+---------
            id     | integer               |           | not null | 
            name   | character varying(30) |           |          | 
            Indexes:
                "person_pkey" PRIMARY KEY, btree (id)     
7. truncate table : The TRUNCATE TABLE command to remove all the records from a particular table.
    Syntax : truncate table <table-name>;

    Example :
        company=# truncate table person;
        TRUNCATE TABLE

8. Temporary table : This query is used to create the temporary table.
    Syntax : create temporary table <table-name>(...);

    Example:
        temporary_database=# create temporary table temp_table(fruits_name varchar,fruits_season varchar);
        CREATE TABLE
    
        a) drop temporary table : To drop the temporary table from database.
            Syntax : drop table <table-name>;
            Example :
                temporary_database=# drop table temp_table;
                DROP TABLE

        Note : If we close thse session then temporary table will automatically delete.

9. Column Aliases : Column alias is used to give a short name to the column.
    Syntax : select <column-name> as <alias-name> from <table-name>;

    Example : 
        company=# select id, name as person_name from person;
        id | person_name 
        ----+-------------
        (0 rows)
10. Insert Data : It is used to insert data into table.
    Syntax : insert into <table-name> (column1,...) values (data1,...);
    
    For multiple rows : 
    Syntax : insert into <table-name> (column1,...) values (data1,...),(data1,...),...;

    Example : 
        company=# insert into employee (emp_id,name,gender) values (3,'Shyam','male');
        INSERT 0 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Shyam | male                          
        (3 rows)
    
11. Select query : SELECT statement is used to fetch the data from a database table, which      returns data in the form of result table.
    Syntax : select <column_name> from <table-name>;
    
    For whole table :
    Syntax : select * from <table-name>;

    Example : 
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Shyam | male                          
        (3 rows)
12. Update query : The UPDATE command is used to change the present records in a table.
    Syntax : update <table-name> set <column-name>=<value> where <condition>;

    Example :
        company=# update employee SET name='Vijay' where emp_id=3;
        UPDATE 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Vijay | male                          
        (3 rows)

13. Delete query : It is used to delete all existing records from a table. And the WHERE clause is used to remove the selected records or else, all the data would be eliminated.
    Syntax : delete from <table-name> where <condition>;

    For deleting all rows from table:
    Syntax : delete from <table-name>;

    Example :   
        company=# delete from employee where emp_id=3;
        DELETE 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
        (2 rows)

  CLAUSES IN POSTGRESQL  

14. Where clause : WHERE clause is used to specify a condition while fetching the data from single table or joining with multiple tables.
    Syntax : select column1,column2 from <table-name> 
            where <Condition>

    Example :
        company=# select * from employee where emp_id=2;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            2 | Kavya | female                        
        (1 row)                   

16. ORDER BY clause : The ORDER BY clause permits us to sort rows returned by a SELECT condition in ascending or descending order depends on the sort expression.
    Syntax : select * from <table-name> order by <column-name> [asc|desc];

    Example :
        company=# select * from employee order by name asc;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            2 | Kavya | female                        
            1 | Ram   | male                          
        (2 rows)

17. Group By clause : GROUP BY clause is used in collaboration with the SELECT statement to group together those rows in a table that have identical data. It is also useful with aggregate functions.
    Syntax : select <column-list> from <table_name> 
            where [conditions]
            group by column1, column2....columnN;
    
    Example :
        company=# select name from employee group by name;
        name  
        -------
        Ram
        Shyam
        Kavya
        (3 rows)

18. Having clause : The having clause is used to specify a search condition for a group or an aggregate.
    Syntax : select <column1> from <table-name> where <condition> 
            group by<column-name1> having <condition>;
    
    Example:
        company=# select name,SUM(salary) from company group by name having SUM(salary)>5000;
        name  |  sum  
        -------+-------
        Paul  | 20000
        James | 10000
        (2 rows)

19. Distinct clause : It is used to delete the matching rows or data from a table and get only the unique records.
    Syntax : select distinct <column-list> from <table-name>;

    Example : 
        company=# select distinct name,salary from company;
        name  | salary 
        -------+--------
        Paul  |  20000
        James |   5000
        (2 rows)

20. Limit clause : It is used to get a subset of rows produced by a command.
    Syntax : select <column-list> from <table-name> order by <column-name> [ASC|DESC]
            LIMIT <row_count>;

    Example :
        company=# select * from company order by salary limit 3;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        6 | C     |   8000
        (3 rows)
    
    LIMIT clause with OFFSET : We can use the OFFSET clause if we want to miss out various of rows before getting the row_count rows.
    Syntax : select <column-list> from <table-name> order by <column-name> 
            LIMIT <row-count> OFFSET <row-to-skip>;
    Example :
        company=# select * from company order by salary limit 3;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        6 | C     |   8000
        (3 rows)

21. Fetch clause : It is used to repond a portion of rows returned by a particular statement.
    Syntax : select <column-list> from <table-name> order by <column-name>
            fetch first <row-count> row only;
    
    Fetch clause with offset : 
        Syntax : select <column-list> from <table-name> order by <column-name>
                offset <row-to-skip> rows fetch first <row-count> row only;

    Example :
        company=# select * from company order by salary fetch first 2 row only;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        (2 rows)

  POSTGRESQL CONDITIONS  

22. AND Condition : The AND condition is used to specify the data if all the conditions separated by AND are TRUE.
    Syntax : where <condition1> and <condition2>;

    Example : 
        company=# select * from company where id>2 and salary>=9000;
        id | name | salary 
        ----+------+--------
        4 | A    |  10000
        5 | B    |   9000
        (2 rows)

23. OR Condition : The OR condition is used to return the data if any of the conditions divided by OR is TRUE.
    Syntax : where <condition1> or <condition2>;

    Example :
        company=# select * from company where id>2 or salary>8000;
        id | name  | salary 
        ----+-------+--------
        1 | Paul  |  20000
        3 | James |   5000
        4 | A     |  10000
        5 | B     |   9000
        6 | C     |   8000
        (5 rows)

24. NOT Condition : The PostgreSQL NOT condition is used with the WHERE clause to negate a condition in a command. 
    Syntax : select * from <table-name> where <column-name> not <condition> 

    Example : 
        company=# select * from company where name not in ('James','Paul');
        id | name | salary 
        ----+------+--------
        4 | A    |  10000
        5 | B    |   9000

-------------------------------------------------------------------------------------->
Certainly! Let's go through each topic, explaining the commands, their purpose, and providing examples in the context of PostgreSQL:

   ---->>  2:11:35 Variables in Functions
-  Command: `DECLARE` 
-  Purpose:  Used to declare variables within a PL/pgSQL block.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION example_function()
  RETURNS INTEGER AS $$
  DECLARE
      my_variable INTEGER;
  BEGIN
      my_variable := 10;
      RETURN my_variable;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:15:55 Store Rows in Variables
-  Command: `SELECT INTO` 
-  Purpose:  Used to assign the result of a query to a variable or record.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION store_rows_in_variable()
  RETURNS TABLE(column1 INTEGER, column2 VARCHAR) AS $$
  DECLARE
      my_variable RECORD;
  BEGIN
      SELECT * INTO my_variable FROM my_table WHERE id = 1;
      RETURN QUERY SELECT * FROM my_variable;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:19:17 IN INOUT and OUT
-  Command: Parameter Declaration (`IN`, `INOUT`, `OUT`) 
-  Purpose:  Specifies the behavior of function parameters.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION inout_example(IN input_param INTEGER, OUT output_param INTEGER, INOUT in_out_param INTEGER)
  AS $$
  BEGIN
      output_param := input_param + 5;
      in_out_param := in_out_param * 2;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:21:01 Using Multiple Outs
-  Command: Multiple `OUT` Clauses 
-  Purpose:  Allows a function to return multiple values.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION multiple_outs_example(x INTEGER)
  RETURNS TABLE(result1 INTEGER, result2 INTEGER)
  AS $$
  BEGIN
      result1 := x + 5;
      result2 := x * 2;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:25:56 Return Query Results
-  Command: `RETURN QUERY` 
-  Purpose:  Used to return the result of a query from a function.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION return_query_results()
  RETURNS TABLE(column1 INTEGER, column2 VARCHAR)
  AS $$
  BEGIN
      RETURN QUERY SELECT * FROM my_table;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:33:42 IF ELSEIF and ELSE
-  Command: `IF`, `ELSEIF`, `ELSE` 
-  Purpose:  Implements conditional logic within a PL/pgSQL block.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION if_else_example(x INTEGER)
  RETURNS VARCHAR
  AS $$
  BEGIN
      IF x > 0 THEN
          RETURN 'Positive';
      ELSEIF x < 0 THEN
          RETURN 'Negative';
      ELSE
          RETURN 'Zero';
      END IF;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:38:48 CASE Statement
-  Command: `CASE` 
-  Purpose:  Simplifies complex conditional logic.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION case_example(x INTEGER)
  RETURNS VARCHAR
  AS $$
  BEGIN
      CASE
          WHEN x > 0 THEN RETURN 'Positive';
          WHEN x < 0 THEN RETURN 'Negative';
          ELSE RETURN 'Zero';
      END CASE;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:42:01 Loop Statement
-  Command: `LOOP`, `END LOOP` 
-  Purpose:  Implements a basic loop structure.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION loop_example()
  RETURNS INTEGER
  AS $$
  DECLARE
      counter INTEGER := 0;
  BEGIN
      LOOP
          counter := counter + 1;
          EXIT WHEN counter = 5;
      END LOOP;
      RETURN counter;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:45:20 FOR LOOP
-  Command: `FOR i IN ... LOOP` 
-  Purpose:  Iterates over a range of values.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION for_loop_example()
  RETURNS INTEGER
  AS $$
  DECLARE
      result INTEGER := 0;
  BEGIN
      FOR i IN 1..5 LOOP
          result := result + i;
      END LOOP;
      RETURN result;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:48:34 Result Sets, Blocks & Raise Notice
-  Command: `RAISE NOTICE` 
-  Purpose:  Emits a debugging message.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION result_sets_and_blocks()
  RETURNS VOID
  AS $$
  DECLARE
      result INTEGER := 0;
  BEGIN
      -- Block 1
      BEGIN
          result := 10;
      END;

      -- Block 2
      BEGIN
          result := result * 2;
          RAISE NOTICE 'Result: %', result;
      END;
  END;
  $$ LANGUAGE plpgsql;
      

Certainly! Let's continue with the explanation of the commands and their purposes in the context of PostgreSQL:

   ---->>  2:51:11 For Each and Arrays
-  Command: `FOREACH` 
-  Purpose:  Used for iterating over elements in an array.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION foreach_example(my_array INTEGER[])
  RETURNS INTEGER
  AS $$
  DECLARE
      total INTEGER := 0;
  BEGIN
      FOREACH element IN ARRAY my_array
      LOOP
          total := total + element;
      END LOOP;
      RETURN total;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:53:20 While Loop
-  Command: `WHILE` 
-  Purpose:  Executes a block of code repeatedly while a condition is true.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION while_loop_example()
  RETURNS INTEGER
  AS $$
  DECLARE
      counter INTEGER := 0;
  BEGIN
      WHILE counter < 5 LOOP
          counter := counter + 1;
      END LOOP;
      RETURN counter;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  2:54:54 Continue
-  Command: `CONTINUE` 
-  Purpose:  Skips the rest of the loop and jumps to the next iteration.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION continue_example()
  RETURNS INTEGER
  AS $$
  DECLARE
      total INTEGER := 0;
  BEGIN
      FOR i IN 1..5 LOOP
          IF i = 3 THEN
              CONTINUE;
          END IF;
          total := total + i;
      END LOOP;
      RETURN total;
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  3:01:34 Stored Procedures
-  Purpose:  A stored procedure is a set of precompiled SQL statements that can be executed with a single call.
-  Example: 
      sql
  CREATE OR REPLACE PROCEDURE my_procedure()
  AS $$
  BEGIN
      -- SQL statements here
      INSERT INTO my_table (column1, column2) VALUES (1, 'example');
  END;
  $$ LANGUAGE plpgsql;
      

   ---->>  3:09:35 Triggers
-  Purpose:  A trigger is a set of instructions that are automatically executed ("triggered") in response to certain events on a particular table or view.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION my_trigger_function()
  RETURNS TRIGGER AS $$
  BEGIN
      -- Trigger logic here
      NEW.updated_at = NOW();
      RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  CREATE TRIGGER my_trigger
  BEFORE UPDATE ON my_table
  FOR EACH ROW
  EXECUTE FUNCTION my_trigger_function();
      

   ---->>  3:29:25 Cursors
-  Command: `DECLARE`, `FETCH`, `CLOSE` 
-  Purpose:  Cursors are used to process a result set one row at a time, allowing more control over data retrieval.
-  Example: 
      sql
  CREATE OR REPLACE FUNCTION cursor_example()
  RETURNS TABLE(column1 INTEGER, column2 VARCHAR)
  AS $$
  DECLARE
      my_cursor CURSOR FOR SELECT * FROM my_table;
      row_data RECORD;
  BEGIN
      OPEN my_cursor;
      LOOP
          FETCH my_cursor INTO row_data;
          EXIT WHEN NOT FOUND;
          -- Process row_data
      END LOOP;
      CLOSE my_cursor;
  END;
  $$ LANGUAGE plpgsql;
      

